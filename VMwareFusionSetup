## How to install Vagrant on VMware Fusion MacOSX

# Install Homebrew if not already installed
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
d)

brew tap hashicorp/tap
brew install hashicorp/tap/hashicorp-vagrant

brew install --cask vmware-fusion
brew install --cask vagrant
brew install --cask vagrant-manager
brew install --cask vagrant-vmware-utility
vagrant plugin install vagrant-vmware-desktop
vagrant plugin list

vagrant --version
vmware-installer --version ?

brew install hashicorp/tap/packer


vagrant --version
vagrant box add precise64 https://vagrantcloud.com/hashicorp/boxes/precise64/versions/1.1.0/providers/virtualbox.box
vagrant init precise64
vagrant up --debug
vagrant halt
vagrant ssh
vagrant rdp


#--
Build Windows 11 Machine

mkdir ~/vagrant-win11 && cd ~/vagrant-win11

Vagrant.configure("2") do |config|
  config.vm.box = "generic/windows11" # Use an existing box or create one
  config.vm.provider "vmware_desktop" do |v|
    v.gui = true
    v.vmx["memsize"] = "8192"
    v.vmx["numvcpus"] = "4"
    v.vmx["firmware"] = "efi"
    v.vmx["vhv.enable"] = "TRUE"
    v.vmx["ethernet0.virtualDev"] = "vmxnet3"
  end
end

##--
Build a Windows 11 OS

Download the official Windows 11 ISO from Microsoft: https://www.microsoft.com/en-us/software-download/windows11
vagrant up --provider=vmware_desktop
open /Applications/VMware\ Fusion.app


##  Prepare the Windows 11 ISO

Download ISO - https://www.microsoft.com/en-us/software-download/windows11
Place the ISO in ~/vagrant-win11/windows11.iso


------
#!/bin/bash

# Set up directories
mkdir -p ~/vagrant-win11
cd ~/vagrant-win11

# Ensure Homebrew is installed
if ! command -v brew &> /dev/null; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Install Vagrant and VMware Fusion
brew install --cask vagrant vmware-fusion
brew install --cask vagrant-vmware-utility
vagrant plugin install vagrant-vmware-desktop

# Create Vagrantfile
cat > Vagrantfile <<EOL
Vagrant.configure("2") do |config|
  config.vm.box = "windows-11-custom"
  config.vm.provider "vmware_desktop" do |v|
    v.gui = true
    v.vmx["memsize"] = "8192"
    v.vmx["numvcpus"] = "4"
    v.vmx["firmware"] = "efi"
    v.vmx["vhv.enable"] = "TRUE"
    v.vmx["ethernet0.virtualDev"] = "vmxnet3"
  end
end
EOL

# Ensure the Windows 11 ISO exists
ISO_PATH=~/vagrant-win11/windows11.iso
if [ ! -f "$ISO_PATH" ]; then
    echo "ERROR: Windows 11 ISO not found at $ISO_PATH"
    echo "Download it from Microsoft and place it in ~/vagrant-win11/windows11.iso"
    exit 1
fi

echo "Windows 11 Vagrant environment setup complete."
echo "Run 'vagrant up --provider=vmware_desktop' to start the VM."
-----

chmod +x setup_win11_vm.sh
./setup_win11_vm.sh

cd ~/vagrant-win11
vagrant up --provider=vmware_desktop

## Package Your Windows 11 VM as a Vagrant Box

cd ~/vagrant-win11
vagrant halt  # Ensure the VM is stopped
vagrant package --output windows11.box

Create a New Box on Vagrant Cloud
Go to Vagrant Cloud and log in.
Click "Create a New Box".
Fill in:
Name: windows-11
Description: "Windows 11 box for VMware Fusion"
Provider: vmware_desktop
Click Create Box

----
Vagrantfile 

 config.vm.communicator = "winrm" # Required for Windows VMs
----
#!/bin/bash

# Set up directories
mkdir -p ~/vagrant-win11
cd ~/vagrant-win11

# Ensure Homebrew is installed
if ! command -v brew &> /dev/null; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Install Vagrant and VMware Fusion
brew install --cask vagrant vmware-fusion
brew install --cask vagrant-vmware-utility
vagrant plugin install vagrant-vmware-desktop

# Ask for the Windows license key
read -p "Enter your Windows 11 license key: " WIN_LICENSE_KEY

# Create Vagrantfile with GUI enabled
cat > Vagrantfile <<EOL
Vagrant.configure("2") do |config|
  config.vm.box = "windows-11-custom"
  config.vm.communicator = "winrm" # Enables Windows communication

  config.vm.provider "vmware_desktop" do |v|
    v.gui = true  # Enable GUI mode
    v.vmx["memsize"] = "8192"
    v.vmx["numvcpus"] = "4"
    v.vmx["firmware"] = "efi"
    v.vmx["vhv.enable"] = "TRUE"
    v.vmx["ethernet0.virtualDev"] = "vmxnet3"
    v.vmx["bios.bootOrder"] = "hdd,cdrom"  # Ensure it boots properly
  end

  # Provision script to activate Windows
  config.vm.provision "shell", path: "activate_windows.bat"
end
EOL

# Create the Windows activation script
cat > activate_windows.bat <<EOL
@echo off
echo Activating Windows...
slmgr /ipk $WIN_LICENSE_KEY
slmgr /skms kms8.msguides.com
slmgr /ato
echo Activation complete.
winrm quickconfig
winrm set winrm/config/service @{AllowUnencrypted="true"}
winrm set winrm/config/service/auth @{Basic="true"}
EOL

# Ensure the Windows 11 ISO exists
ISO_PATH=~/vagrant-win11/windows11.iso
if [ ! -f "$ISO_PATH" ]; then
    echo "ERROR: Windows 11 ISO not found at $ISO_PATH"
    echo "Download it from Microsoft and place it in ~/vagrant-win11/windows11.iso"
    exit 1
fi

echo "Windows 11 Vagrant environment setup complete."
echo "Run 'vagrant up --provider=vmware_desktop' to start the VM with GUI."


----

chmod +x setup_win11_vm.sh
./setup_win11_vm.sh


cd ~/vagrant-win11
vagrant up --provider=vmware_desktop
slmgr /xpr


------


------

Windows Images  - https://github.com/joefitzgerald/packer-windows

------
Build Images

https://github.com/joefitzgerald/packer-windows
https://github.com/rgl/windows-vagrant

mkdir ~/vagrant-win11 && cd ~/vagrant-win11
vagrant init windows-11
vagrant up --provider=vmware_desktop
vagrant rdp

vagrant package --base "Windows 11" --output windows11.box
vagrant cloud publish USERNAME/windows-11 1.0.0 vmware_desktop windows11.box --release --description "Windows 11 Box for VMware Fusion"

packer init .
packer build windows11.pkr.hcl
vagrant box add windows-11 windows11.box


Vagrant.configure("2") do |config|
  config.vm.box = "windows-11"
  config.vm.communicator = "winrm"

  config.vm.provider "vmware_desktop" do |v|
    v.gui = true
    v.vmx["memsize"] = "8192"
    v.vmx["numvcpus"] = "4"
  end
end


vagrant up --provider=vmware_desktop
vagrant rdp





